---
layout: post
title: "进程，线程，并发"
date: 2015-03-18 10:44:22 +0800
comments: true
categories: 
---

看了一些资料，记录以下自己的理解。

进程是表示资源分配的基本单位，它运行起来需要的是系统资源，是系统给他分配的一些资源。至于是不是系统调度的基本单位，实际上跟操作系统内核是有关系的，在Mac、Windows NT等采用微内核结构的操作系统中，进程的功能发生了变化：它只是资源分配的单位，而不再是调度运行的单位。在微内核系统中，真正调度运行的基本单位是线程。因此，实现并发功能的单位是线程。有必要说下，进程需要的资源和线程需要的资源。跟操作系统有关，但是也很相像。

其实对于我本人而言我是很希望知道在操作系统内部究竟是怎么给进程和线程分配资源的：

进程：查到了一个很好的关于linux0.11中的进程的数据结构

http://www.cppblog.com/jake1036/archive/2010/11/13/133530.html

线程：一个标准的线程由线程ID，当前指令指针(PC)，寄存器集合和堆栈组成。

线程自己的资源：栈，私有数据，但是多个线程是共享内存单元的，（是有一定的安全问题的）。

关于线程的数据结构：http://www.programfan.com/blog/article.asp?id=44349

 

   操作系统创建线程实际上就是在处理器调度的时候能够在最小的资源代价下切换任务。一个说法是：进程切换比线程切换开销大是因为进程切换时要切页表，而且往往伴随着页调度，因为进程的数据段代码段要换出去，以便把将要执行的进程的内容换进来。本来进程的内容就是线程的超集。而且线程只需要保存线程的上下文（相关寄存器状态和栈的信息）就好了，动作很小。在多处理器下，又允许几个线程各自在单独处理上进行，这样能够很好的实现这种并发性。
